swagger: '2.0'
info:
  title: Swagger Petstore - OpenAPI 3.0
  version: '1.0'
  description: 
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification. 
    You can find out more about

    Swagger at [https://swagger.io](https://swagger.io). In the third iteration
    of the pet store, we've switched to the design first approach!

    You can now help us improve the API whether it's by making changes to the
    definition itself or to the code.

    That way, with time, we can improve the API in general, and expose some of
    the new features in OAS3.


    Some useful links:

    - [The Pet Store
    repository](https://github.com/swagger-api/swagger-petstore)

    - [The source API definition for the Pet
    Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: https://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
host: apim-vwg.azure-api.net
basePath: /petstore
schemes:
  - https
securityDefinitions:
  api_key:
    type: apiKey
    in: header
    name: Ocp-Apim-Subscription-Key
security:
  - api_key: []
paths:
  /pet:
    post:
      description: Add a new pet to the store.
      operationId: addPet
      summary: Add a new pet to the store.
      tags:
        - pet
      parameters:
        - name: id
          in: formData
          type: integer
        - name: name
          in: formData
          required: true
          type: string
        - name: category
          in: formData
          type: string
        - name: photoUrls
          in: formData
          required: true
          type: string
          description: Comma-separated list of photo URLs
        - name: tags
          in: formData
          type: string
          description: Comma-separated list of tags
        - name: status
          in: formData
          description: pet status in the store
          type: string
          enum:
            - available
            - pending
            - sold
      consumes:
        - application/json
        - application/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/Pet'
          examples:
            application/json:
              id: 10
              name: doggie
              category:
                id: 1
                name: Dogs
              photoUrls:
                - string
              tags:
                - id: 0
                  name: string
              status: available
            application/xml: "<pet>\r\n  <id>10</id>\r\n  <name>doggie</name>\r\n  <category>\r\n    <id>1</id>\r\n    <name>Dogs</name>\r\n  </category>\r\n  <photoUrls>\r\n    <photoUrl>string</photoUrl>\r\n  </photoUrls>\r\n  <tags>\r\n    <tag>\r\n      <id>0</id>\r\n      <name>string</name>\r\n    </tag>\r\n  </tags>\r\n  <status>available</status>\r\n</pet>"
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        '500':
          description: Unexpected error
    put:
      description: Update an existing pet by Id.
      operationId: updatePet
      summary: Update an existing pet.
      tags:
        - pet
      parameters:
        - name: id
          in: formData
          type: integer
        - name: name
          in: formData
          required: true
          type: string
        - name: category
          in: formData
          type: string
        - name: photoUrls
          in: formData
          required: true
          type: string
          description: Comma-separated list of photo URLs
        - name: tags
          in: formData
          type: string
          description: Comma-separated list of tags
        - name: status
          in: formData
          description: pet status in the store
          type: string
          enum:
            - available
            - pending
            - sold
      consumes:
        - application/json
        - application/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/Pet'
          examples:
            application/json:
              id: 10
              name: doggie
              category:
                id: 1
                name: Dogs
              photoUrls:
                - string
              tags:
                - id: 0
                  name: string
              status: available
            application/xml: "<pet>\r\n  <id>10</id>\r\n  <name>doggie</name>\r\n  <category>\r\n    <id>1</id>\r\n    <name>Dogs</name>\r\n  </category>\r\n  <photoUrls>\r\n    <photoUrl>string</photoUrl>\r\n  </photoUrls>\r\n  <tags>\r\n    <tag>\r\n      <id>0</id>\r\n      <name>string</name>\r\n    </tag>\r\n  </tags>\r\n  <status>available</status>\r\n</pet>"
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '422':
          description: Validation exception
        '500':
          description: Unexpected error
  /pet/findByStatus:
    get:
      description: Multiple status values can be provided with comma separated strings.
      operationId: findPetsByStatus
      summary: Finds Pets by status.
      tags:
        - pet
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          type: string
          default: available
          enum:
            - available
            - pending
            - sold
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
          examples:
            application/json:
              - id: 10
                name: doggie
                category:
                  id: 1
                  name: Dogs
                photoUrls:
                  - string
                tags:
                  - id: 0
                    name: string
                status: available
            application/xml: "<pet>\r\n  <id>10</id>\r\n  <name>doggie</name>\r\n  <category>\r\n    <id>1</id>\r\n    <name>Dogs</name>\r\n  </category>\r\n  <photoUrls>\r\n    <photoUrl>string</photoUrl>\r\n  </photoUrls>\r\n  <tags>\r\n    <tag>\r\n      <id>0</id>\r\n      <name>string</name>\r\n    </tag>\r\n  </tags>\r\n  <status>available</status>\r\n</pet>"
        '400':
          description: Invalid status value
        '500':
          description: Unexpected error
  /pet/findByTags:
    get:
      description: 
        Multiple tags can be provided with comma separated strings. Use tag1,
        tag2, tag3 for testing.
      operationId: findPetsByTags
      summary: Finds Pets by tags.
      tags:
        - pet
      parameters:
        - name: tags
          in: query
          description: Comma-separated list of tags to filter by
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Pet'
          examples:
            application/json:
              - id: 10
                name: doggie
                category:
                  id: 1
                  name: Dogs
                photoUrls:
                  - string
                tags:
                  - id: 0
                    name: string
                status: available
            application/xml: "<pet>\r\n  <id>10</id>\r\n  <name>doggie</name>\r\n  <category>\r\n    <id>1</id>\r\n    <name>Dogs</name>\r\n  </category>\r\n  <photoUrls>\r\n    <photoUrl>string</photoUrl>\r\n  </photoUrls>\r\n  <tags>\r\n    <tag>\r\n      <id>0</id>\r\n      <name>string</name>\r\n    </tag>\r\n  </tags>\r\n  <status>available</status>\r\n</pet>"
        '400':
          description: Invalid tag value
        '500':
          description: Unexpected error
  /pet/{petId}:
    get:
      description: Returns a single pet.
      operationId: getPetById
      summary: Find pet by ID.
      tags:
        - pet
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          type: integer
          format: int64
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Pet'
          examples:
            application/json:
              id: 10
              name: doggie
              category:
                id: 1
                name: Dogs
              photoUrls:
                - string
              tags:
                - id: 0
                  name: string
              status: available
            application/xml: "<pet>\r\n  <id>10</id>\r\n  <name>doggie</name>\r\n  <category>\r\n    <id>1</id>\r\n    <name>Dogs</name>\r\n  </category>\r\n  <photoUrls>\r\n    <photoUrl>string</photoUrl>\r\n  </photoUrls>\r\n  <tags>\r\n    <tag>\r\n      <id>0</id>\r\n      <name>string</name>\r\n    </tag>\r\n  </tags>\r\n  <status>available</status>\r\n</pet>"
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '500':
          description: Unexpected error
    delete:
      description: Delete a pet.
      operationId: deletePet
      summary: Deletes a pet.
      tags:
        - pet
      parameters:
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          type: integer
          format: int64
        - name: api_key
          in: header
          description: ''
          type: string
      responses:
        '200':
          description: Pet deleted
        '400':
          description: Invalid pet value
        '500':
          description: Unexpected error
    post:
      description: Updates a pet resource based on the form data.
      operationId: updatePetWithForm
      summary: Updates a pet in the store with form data.
      tags:
        - pet
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          type: integer
          format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Pet'
          examples:
            application/json:
              id: 10
              name: doggie
              category:
                id: 1
                name: Dogs
              photoUrls:
                - string
              tags:
                - id: 0
                  name: string
              status: available
            application/xml: "<pet>\r\n  <id>10</id>\r\n  <name>doggie</name>\r\n  <category>\r\n    <id>1</id>\r\n    <name>Dogs</name>\r\n  </category>\r\n  <photoUrls>\r\n    <photoUrl>string</photoUrl>\r\n  </photoUrls>\r\n  <tags>\r\n    <tag>\r\n      <id>0</id>\r\n      <name>string</name>\r\n    </tag>\r\n  </tags>\r\n  <status>available</status>\r\n</pet>"
        '400':
          description: Invalid input
        '500':
          description: Unexpected error
  /pet/{petId}/uploadImage:
    post:
      description: Upload image of the pet.
      operationId: uploadFile
      summary: Uploads an image.
      tags:
        - pet
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          type: integer
          format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          type: string
        - name: pet-petId-UploadImagePostRequest-2
          in: body
          schema:
            format: binary
            type: string
      consumes:
        - application/octet-stream
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/ApiResponse'
          examples:
            application/json:
              code: 0
              type: string
              message: string
        '400':
          description: No file uploaded
        '404':
          description: Pet not found
        '500':
          description: Unexpected error
  /store/inventory:
    get:
      description: Returns a map of status codes to quantities.
      operationId: getInventory
      summary: Returns pet inventories by status.
      tags:
        - store
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            additionalProperties:
              format: int32
              type: integer
          examples:
            application/json: {}
        '400':
          description: Unexpected error
        '500':
          description: Unexpected error
  /store/order:
    post:
      description: Place a new order in the store.
      operationId: placeOrder
      summary: Place an order for a pet.
      tags:
        - store
      parameters:
        - name: id
          in: formData
          type: integer
        - name: petId
          in: formData
          type: integer
        - name: quantity
          in: formData
          type: integer
        - name: shipDate
          in: formData
          type: string
        - name: status
          in: formData
          description: Order Status
          type: string
          enum:
            - placed
            - approved
            - delivered
        - name: complete
          in: formData
          type: boolean
      consumes:
        - application/json
        - application/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
          examples:
            application/json:
              id: 10
              petId: 198772
              quantity: 7
              shipDate: string
              status: approved
              complete: true
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        '500':
          description: Unexpected error
  /store/order/{orderId}:
    get:
      description: 
        For valid response try integer IDs with value <= 5 or > 10. Other values
        will generate exceptions.
      operationId: getOrderById
      summary: Find purchase order by ID.
      tags:
        - store
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          type: integer
          format: int64
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
          examples:
            application/json:
              id: 10
              petId: 198772
              quantity: 7
              shipDate: string
              status: approved
              complete: true
            application/xml: "<order>\r\n  <id>10</id>\r\n  <petId>198772</petId>\r\n  <quantity>7</quantity>\r\n  <shipDate>string</shipDate>\r\n  <status>approved</status>\r\n  <complete>true</complete>\r\n</order>"
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
        '500':
          description: Unexpected error
    delete:
      description: 
        For valid response try integer IDs with value < 1000. Anything above
        1000 or non-integers will generate API errors.
      operationId: deleteOrder
      summary: Delete purchase order by identifier.
      tags:
        - store
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: order deleted
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
        '500':
          description: Unexpected error
  /user:
    post:
      description: This can only be done by the logged in user.
      operationId: createUser
      summary: Create user.
      tags:
        - user
      parameters:
        - name: id
          in: formData
          type: integer
        - name: username
          in: formData
          type: string
        - name: firstName
          in: formData
          type: string
        - name: lastName
          in: formData
          type: string
        - name: email
          in: formData
          type: string
        - name: password
          in: formData
          type: string
        - name: phone
          in: formData
          type: string
        - name: userStatus
          in: formData
          description: User Status
          type: integer
      consumes:
        - application/json
        - application/xml
        - application/x-www-form-urlencoded
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
          examples:
            application/json:
              id: 10
              username: theUser
              firstName: John
              lastName: James
              email: john@email.com
              password: '12345'
              phone: '12345'
              userStatus: 1
            application/xml: "<user>\r\n  <id>10</id>\r\n  <username>theUser</username>\r\n  <firstName>John</firstName>\r\n  <lastName>James</lastName>\r\n  <email>john@email.com</email>\r\n  <password>12345</password>\r\n  <phone>12345</phone>\r\n  <userStatus>1</userStatus>\r\n</user>"
        '400':
          description: Unexpected error
        '500':
          description: Unexpected error
  /user/createWithList:
    post:
      description: Creates list of users with given input array.
      operationId: createUsersWithListInput
      summary: Creates list of users with given input array.
      tags:
        - user
      parameters:
        - name: userCreateWithListPostRequest
          in: body
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
            example:
              - id: 10
                username: theUser
                firstName: John
                lastName: James
                email: john@email.com
                password: '12345'
                phone: '12345'
                userStatus: 1
      consumes:
        - application/json
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/User'
          examples:
            application/json:
              id: 10
              username: theUser
              firstName: John
              lastName: James
              email: john@email.com
              password: '12345'
              phone: '12345'
              userStatus: 1
            application/xml: "<user>\r\n  <id>10</id>\r\n  <username>theUser</username>\r\n  <firstName>John</firstName>\r\n  <lastName>James</lastName>\r\n  <email>john@email.com</email>\r\n  <password>12345</password>\r\n  <phone>12345</phone>\r\n  <userStatus>1</userStatus>\r\n</user>"
        '400':
          description: Unexpected error
        '500':
          description: Unexpected error
  /user/login:
    get:
      description: Log into the system.
      operationId: loginUser
      summary: Logs user into the system.
      tags:
        - user
      parameters:
        - name: username
          in: query
          description: The user name for login
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          type: string
      produces:
        - application/xml
        - application/json
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              type: integer
              description: calls per hour allowed by the user
              format: int32
            X-Expires-After:
              type: string
              description: date in UTC when token expires
              format: date-time
          schema:
            type: string
          examples:
            application/xml: 
              <UserLoginGet200ApplicationXmlResponse>string</UserLoginGet200ApplicationXmlResponse>
            application/json: string
        '400':
          description: Invalid username/password supplied
        '500':
          description: Unexpected error
  /user/logout:
    get:
      description: Log user out of the system.
      operationId: logoutUser
      summary: Logs out current logged in user session.
      tags:
        - user
      responses:
        '200':
          description: successful operation
        '400':
          description: Unexpected error
        '500':
          description: Unexpected error
  /user/{username}:
    get:
      description: Get user detail based on username.
      operationId: getUserByName
      summary: Get user by user name.
      tags:
        - user
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing
          required: true
          type: string
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
          examples:
            application/json:
              id: 10
              username: theUser
              firstName: John
              lastName: James
              email: john@email.com
              password: '12345'
              phone: '12345'
              userStatus: 1
            application/xml: "<user>\r\n  <id>10</id>\r\n  <username>theUser</username>\r\n  <firstName>John</firstName>\r\n  <lastName>James</lastName>\r\n  <email>john@email.com</email>\r\n  <password>12345</password>\r\n  <phone>12345</phone>\r\n  <userStatus>1</userStatus>\r\n</user>"
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
        '500':
          description: Unexpected error
    delete:
      description: This can only be done by the logged in user.
      operationId: deleteUser
      summary: Delete user resource.
      tags:
        - user
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '200':
          description: User deleted
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
        '500':
          description: Unexpected error
    put:
      description: This can only be done by the logged in user.
      operationId: updateUser
      summary: Update user resource.
      tags:
        - user
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          type: string
        - name: id
          in: formData
          type: integer
        - name: firstName
          in: formData
          type: string
        - name: lastName
          in: formData
          type: string
        - name: email
          in: formData
          type: string
        - name: password
          in: formData
          type: string
        - name: phone
          in: formData
          type: string
        - name: userStatus
          in: formData
          description: User Status
          type: integer
      consumes:
        - application/json
        - application/xml
        - application/x-www-form-urlencoded
      responses:
        '200':
          description: successful operation
        '400':
          description: bad request
        '404':
          description: user not found
        '500':
          description: Unexpected error
definitions:
  Order:
    type: object
    properties:
      id:
        format: int64
        type: integer
        example: 10
      petId:
        format: int64
        type: integer
        example: 198772
      quantity:
        format: int32
        type: integer
        example: 7
      shipDate:
        format: date-time
        type: string
      status:
        description: Order Status
        enum:
          - placed
          - approved
          - delivered
        type: string
        example: approved
      complete:
        type: boolean
    xml:
      name: order
    example:
      id: 10
      petId: 198772
      quantity: 7
      shipDate: string
      status: approved
      complete: true
  Category:
    type: object
    properties:
      id:
        format: int64
        type: integer
        example: 1
      name:
        type: string
        example: Dogs
    xml:
      name: category
  User:
    type: object
    properties:
      id:
        format: int64
        type: integer
        example: 10
      username:
        type: string
        example: theUser
      firstName:
        type: string
        example: John
      lastName:
        type: string
        example: James
      email:
        type: string
        example: john@email.com
      password:
        type: string
        example: '12345'
      phone:
        type: string
        example: '12345'
      userStatus:
        format: int32
        description: User Status
        type: integer
        example: 1
    xml:
      name: user
    example:
      id: 10
      username: theUser
      firstName: John
      lastName: James
      email: john@email.com
      password: '12345'
      phone: '12345'
      userStatus: 1
  Tag:
    type: object
    properties:
      id:
        format: int64
        type: integer
      name:
        type: string
    xml:
      name: tag
  Pet:
    required:
      - name
      - photoUrls
    type: object
    properties:
      id:
        format: int64
        type: integer
        example: 10
      name:
        type: string
        example: doggie
      category:
        $ref: '#/definitions/Category'
      photoUrls:
        type: array
        items:
          type: string
          xml:
            name: photoUrl
        xml:
          wrapped: true
      tags:
        type: array
        items:
          $ref: '#/definitions/Tag'
        xml:
          wrapped: true
      status:
        description: pet status in the store
        enum:
          - available
          - pending
          - sold
        type: string
    xml:
      name: pet
    example:
      id: 10
      name: doggie
      category:
        id: 1
        name: Dogs
      photoUrls:
        - string
      tags:
        - id: 0
          name: string
      status: available
  ApiResponse:
    type: object
    properties:
      code:
        format: int32
        type: integer
      type:
        type: string
      message:
        type: string
    xml:
      name: '##default'
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      url: https://swagger.io/
      description: Find out more
  - name: store
    description: Access to Petstore orders
    externalDocs:
      url: https://swagger.io/
      description: Find out more about our store
  - name: user
    description: Operations about user
x-ms-export-notes:
  - 
    Operation 'Update an existing pet.' has both - body parameters and formData
    parameters which is not allowed by Swagger. So, only body parameters are
    exported.
  - 
    Operation 'Add a new pet to the store.' has both - body parameters and
    formData parameters which is not allowed by Swagger. So, only body
    parameters are exported.
  - 
    Operation 'Place an order for a pet.' has both - body parameters and
    formData parameters which is not allowed by Swagger. So, only body
    parameters are exported.
  - 
    Operation 'Create user.' has both - body parameters and formData parameters
    which is not allowed by Swagger. So, only body parameters are exported.
  - 
    Operation 'Update user resource.' has both - body parameters and formData
    parameters which is not allowed by Swagger. So, only body parameters are
    exported.
